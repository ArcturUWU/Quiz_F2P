import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Term } from '../../types';
import Card from '../ui/Card';
import Input from '../ui/Input';
import Button from '../ui/Button';

interface WritingQuestionProps {
  term: Term;
  onAnswer: (correct: boolean, answer: string) => void;
}

const WritingQuestion: React.FC<WritingQuestionProps> = ({ term, onAnswer }) => {
  const [answer, setAnswer] = useState('');
  const [submitted, setSubmitted] = useState(false);
  const [isCorrect, setIsCorrect] = useState(false);
  const [isLocked, setIsLocked] = useState(false);
  
  const lastActionTime = useRef<number>(0);
  const isComponentMounted = useRef(true);
  const answerTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lockTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
  useEffect(() => {
    isComponentMounted.current = true;
    
    return () => {
      isComponentMounted.current = false;
      
      if (answerTimeoutRef.current) {
        clearTimeout(answerTimeoutRef.current);
        answerTimeoutRef.current = null;
      }
      
      if (lockTimeoutRef.current) {
        clearTimeout(lockTimeoutRef.current);
        lockTimeoutRef.current = null;
      }
    };
  }, []);
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞
  useEffect(() => {
    setAnswer('');
    setSubmitted(false);
    setIsCorrect(false);
    setIsLocked(false);
    lastActionTime.current = 0;
  }, [term.id]);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
  const checkAnswer = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç–≤–µ—Ç –∏ –Ω–µ –æ—Ç–≤–µ—á–µ–Ω –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å
    if (!answer.trim() || submitted || isLocked) return;
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    const now = Date.now();
    if (now - lastActionTime.current < 180) return;
    
    lastActionTime.current = now;
    setIsLocked(true);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    const normalizedAnswer = answer.trim().toLowerCase();
    const normalizedDefinition = term.definition.toLowerCase();
    
    // –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    const isAnswerCorrect = normalizedAnswer === normalizedDefinition;
    
    setIsCorrect(isAnswerCorrect);
    setSubmitted(true);
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    answerTimeoutRef.current = setTimeout(() => {
      if (isComponentMounted.current) {
        onAnswer(isAnswerCorrect, answer);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
        lockTimeoutRef.current = setTimeout(() => {
          if (isComponentMounted.current) {
            setIsLocked(false);
          }
          lockTimeoutRef.current = null;
        }, 100);
      }
      answerTimeoutRef.current = null;
    }, 150);
  }, [answer, submitted, isLocked, term.definition, onAnswer]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && answer.trim() && !submitted && !isLocked) {
      checkAnswer();
    }
  }, [answer, submitted, isLocked, checkAnswer]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setAnswer(e.target.value);
  }, []);
  
  return (
    <Card className="w-full">
      <h3 className="text-xl text-[color:var(--text-color)] mb-6">
        –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è: <span className="font-semibold text-[color:var(--primary-color)]">{term.term}</span>
      </h3>
      
      <div className="mb-6">
        <Input
          fullWidth
          placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ..."
          value={answer}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          disabled={submitted || isLocked}
          data-testid="writing-input"
        />
      </div>
      
      {!submitted ? (
        <Button 
          onClick={checkAnswer}
          disabled={!answer.trim() || isLocked}
          className="w-full"
          data-testid="check-answer-button"
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        </Button>
      ) : (
        <div className={`mt-4 p-4 rounded-lg ${
          isCorrect
            ? "bg-emerald-950/30 border border-emerald-500"
            : "bg-rose-950/30 border border-rose-500"
        }`}>
          <p className={`text-sm mb-2 ${
            isCorrect ? "text-emerald-400" : "text-rose-400"
          }`}>
            {isCorrect ? "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç" : "–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ."}
          </p>
          <div className="mt-2">
            <p className="text-xs text-[color:var(--text-color)]/70 mb-1">–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</p>
            <p className="text-sm text-[color:var(--text-color)]">{term.definition}</p>
          </div>
          {!isCorrect && (
            <div className="mt-3">
              <p className="text-xs text-[color:var(--text-color)]/70 mb-1">–í–∞—à –æ—Ç–≤–µ—Ç:</p>
              <p className="text-sm text-[color:var(--text-color)]/70">{answer}</p>
            </div>
          )}
        </div>
      )}
    </Card>
  );
};

export default WritingQuestion;